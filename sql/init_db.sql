-- Tables creation
CREATE UNLOGGED TABLE clients (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    c_limit INTEGER,
    c_balance INTEGER DEFAULT 0
);

CREATE UNLOGGED TABLE transactions (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id SMALLINT REFERENCES clients NOT NULL,
    t_value INTEGER NOT NULL,
    t_type VARCHAR(1) NOT NULL,
    t_description VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes to improve query performance
CREATE INDEX idx_client_id ON clients USING HASH(id);
CREATE INDEX idx_transaction_id_desc ON transactions (id DESC);
CREATE INDEX idx_transaction_client_id ON transactions USING HASH(client_id);

-- Add contraint to check user balance before update
ALTER TABLE clients ADD CONSTRAINT balance_within_limit CHECK (c_balance > -c_limit);
ALTER TABLE transactions ADD CONSTRAINT fk_client_id FOREIGN KEY (client_id) REFERENCES clientes(id);
ALTER TABLE transactions ADD CONSTRAINT valid_transaction_type CHECK (t_type IN ('c', 'd'));

-- Function to update a client's balance
CREATE OR REPLACE FUNCTION updateClientBalance(clientId SMALLINT, transactionValue INTEGER)
    RETURNS TABLE (new_balance INTEGER, client_limit INTEGER) AS $$
DECLARE
    update_record RECORD;
BEGIN
    SELECT c_balance, c_limit INTO update_record 
    FROM clients 
    WHERE id = clientId 
    FOR UPDATE;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Client with ID % not found.', clientId;
    END IF;

    UPDATE clients
    SET c_balance = c_balance + transactionValue 
    WHERE id = clientId
    RETURNING c_balance, c_limit INTO update_record;

    RETURN QUERY SELECT update_record.c_balance, update_record.c_limit;
END;
    $$ LANGUAGE plpgsql;


-- Initial clients insertion
DO $$
BEGIN
  INSERT INTO clients (c_limit)
  VALUES
    (1000 * 100),
    (800 * 100),
    (10000 * 100),
    (100000 * 100),
    (5000 * 100);
END;
    $$